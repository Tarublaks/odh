-- Services TEST
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local UIS = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Files
local settingsFile = "auto_rejoin_settings.json"
local posFile = "auto_rejoin_pos.json"

-- Defaults
local defaultMin = 600
local defaultMax = 900
local delayMin, delayMax = defaultMin, defaultMax
local guiPosition = UDim2.new(0, 30, 0, 30)
local isRunning = true
local isMinimized = false
local autoMoveEnabled = false
local isClosed = false

-- Load delay range
local function loadSettings()
	if isfile and isfile(settingsFile) then
		local ok, data = pcall(function()
			return HttpService:JSONDecode(readfile(settingsFile))
		end)
		if ok and data and data.min and data.max then
			autoMoveEnabled = data.autoMove == true
			return tonumber(data.min), tonumber(data.max)
		end
	end
	return defaultMin, defaultMax
end

-- Save delay range
local function saveSettings(minVal, maxVal, autoMove)
	if writefile then
		local data = HttpService:JSONEncode({ min = minVal, max = maxVal, autoMove = autoMove })
		writefile(settingsFile, data)
	end
end

-- Load GUI position
local function loadGUIPos()
	if isfile and isfile(posFile) then
		local ok, data = pcall(function()
			return HttpService:JSONDecode(readfile(posFile))
		end)
		if ok and data and data.x and data.y then
			return UDim2.new(0, data.x, 0, data.y)
		end
	end
	return guiPosition
end

-- Save GUI position
local function saveGUIPos(pos)
	if writefile then
		local data = HttpService:JSONEncode({ x = pos.X.Offset, y = pos.Y.Offset })
		writefile(posFile, data)
	end
end

-- Load settings
delayMin, delayMax = loadSettings()
guiPosition = loadGUIPos()

-- GUI
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.Name = "AutoRejoinGUI"

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 260, 0, 190)
frame.Position = guiPosition
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.Active = true
frame.Draggable = false
frame.ClipsDescendants = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

-- Title
local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, -60, 0, 30)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "üå± Auto Rejoin"
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left

-- Minimize
local minBtn = Instance.new("TextButton", frame)
minBtn.Text = "-"
minBtn.Size = UDim2.new(0, 24, 0, 24)
minBtn.Position = UDim2.new(1, -54, 0, 3)
minBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
minBtn.TextColor3 = Color3.new(1, 1, 1)
minBtn.Font = Enum.Font.GothamBold
minBtn.TextSize = 18

-- Close
local closeBtn = Instance.new("TextButton", frame)
closeBtn.Text = "X"
closeBtn.Size = UDim2.new(0, 24, 0, 24)
closeBtn.Position = UDim2.new(1, -28, 0, 3)
closeBtn.BackgroundColor3 = Color3.fromRGB(180, 0, 0)
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 14

-- Countdown label
local countdownLbl = Instance.new("TextLabel", frame)
countdownLbl.Size = UDim2.new(1, -20, 0, 30)
countdownLbl.Position = UDim2.new(0, 10, 0, 40)
countdownLbl.BackgroundTransparency = 1
countdownLbl.Text = "‚è≥ Starting..."
countdownLbl.TextColor3 = Color3.new(1, 1, 1)
countdownLbl.Font = Enum.Font.Gotham
countdownLbl.TextSize = 14
countdownLbl.TextXAlignment = Enum.TextXAlignment.Center

-- Time input
local timeBox = Instance.new("TextBox", frame)
timeBox.Text = tostring(delayMin) .. "-" .. tostring(delayMax)
timeBox.Size = UDim2.new(0, 120, 0, 30)
timeBox.Position = UDim2.new(0, 20, 0, 80)
timeBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
timeBox.TextColor3 = Color3.new(1, 1, 1)
timeBox.PlaceholderText = "min-max"
timeBox.Font = Enum.Font.Gotham
timeBox.TextSize = 14

-- Save button
local saveBtn = Instance.new("TextButton", frame)
saveBtn.Text = "üìé Save"
saveBtn.Size = UDim2.new(0, 100, 0, 30)
saveBtn.Position = UDim2.new(0, 150, 0, 80)
saveBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
saveBtn.TextColor3 = Color3.new(1, 1, 1)
saveBtn.Font = Enum.Font.Gotham
saveBtn.TextSize = 14

-- Toggle rejoin
local toggleBtn = Instance.new("TextButton", frame)
toggleBtn.Text = isRunning and "üü¢ Enabled" or "üî¥ Disabled"
toggleBtn.Size = UDim2.new(0, 220, 0, 30)
toggleBtn.Position = UDim2.new(0, 20, 0, 120)
toggleBtn.BackgroundColor3 = isRunning and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(180, 0, 0)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 14

-- Auto Move Toggle
local autoMoveToggleBtn = Instance.new("TextButton", frame)
autoMoveToggleBtn.Text = autoMoveEnabled and "üö∂ Auto Move: ON" or "üö∂ Auto Move: OFF"
autoMoveToggleBtn.Size = UDim2.new(0, 220, 0, 30)
autoMoveToggleBtn.Position = UDim2.new(0, 20, 0, 155)
autoMoveToggleBtn.BackgroundColor3 = autoMoveEnabled and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(80, 80, 80)
autoMoveToggleBtn.TextColor3 = Color3.new(1, 1, 1)
autoMoveToggleBtn.Font = Enum.Font.GothamBold
autoMoveToggleBtn.TextSize = 14

-- ‚úÖ Minimize toggle logic
local function setMinimized(minimize)
	isMinimized = minimize
	for _, child in pairs(frame:GetChildren()) do
		if child:IsA("GuiObject") and child ~= minBtn and child ~= closeBtn and child ~= title then
			child.Visible = not minimize
		end
	end
	minBtn.Text = minimize and "+" or "-"
	frame.Size = minimize and UDim2.new(0, 260, 0, 34) or UDim2.new(0, 260, 0, 190)
end

-- ‚¨á Connect Minimize Button
minBtn.MouseButton1Click:Connect(function()
	setMinimized(not isMinimized)
end)

autoMoveToggleBtn.MouseButton1Click:Connect(function()
	autoMoveEnabled = not autoMoveEnabled
	autoMoveToggleBtn.Text = autoMoveEnabled and "üö∂ Auto Move: ON" or "üö∂ Auto Move: OFF"
	autoMoveToggleBtn.BackgroundColor3 = autoMoveEnabled and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(80, 80, 80)
	saveSettings(delayMin, delayMax, autoMoveEnabled)
end)

saveBtn.MouseButton1Click:Connect(function()
	local minVal, maxVal = timeBox.Text:match("^(%d+)%s*%-+%s*(%d+)$")
	minVal, maxVal = tonumber(minVal), tonumber(maxVal)
	if minVal and maxVal and minVal > 0 and maxVal > minVal then
		delayMin, delayMax = minVal, maxVal
		saveSettings(delayMin, delayMax, autoMoveEnabled)
		countdownLbl.Text = "‚úÖ Saved: " .. delayMin .. "-" .. delayMax .. "s"
	else
		countdownLbl.Text = "‚ùå Invalid range. Use: min-max"
	end
end)

toggleBtn.MouseButton1Click:Connect(function()
	isRunning = not isRunning
	toggleBtn.Text = isRunning and "üü¢ Enabled" or "üî¥ Disabled"
	toggleBtn.BackgroundColor3 = isRunning and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(180, 0, 0)
end)

-- ‚ùå Close button stops everything
closeBtn.MouseButton1Click:Connect(function()
	isClosed = true
	isRunning = false
	saveGUIPos(frame.Position)
	gui:Destroy()
end)

-- Countdown loop
local function startCountdown()
	while not isClosed do
		if isRunning then
			local countdown = math.random(delayMin, delayMax)
			while countdown > 0 and isRunning and not isClosed do
				countdownLbl.Text = string.format("‚è≥ (%ds) Rejoining in %02d:%02d", countdown, math.floor(countdown / 60), countdown % 60)
				wait(1)
				countdown -= 1
			end
			if isRunning and not isClosed then
				countdownLbl.Text = "üöÄ Rejoining..."
				LocalPlayer:Kick("Rejoining...")
				wait(1)
				TeleportService:Teleport(game.PlaceId, LocalPlayer)
			end
		else
			if not isClosed then
				countdownLbl.Text = "‚è∏ Paused..."
			end
			wait(1)
		end
	end
end

-- Auto Move loop
local function autoMoveLoop()
	while not isClosed do
		if autoMoveEnabled and isRunning then
			local char = LocalPlayer.Character
			if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
				local root = char.HumanoidRootPart
				local hum = char.Humanoid
				local angle = math.random() * math.pi * 2
				local direction = Vector3.new(math.cos(angle), 0, math.sin(angle)) * math.random(3, 6)
				root.Velocity = direction * 2
				if math.random(1, 3) == 1 then
					hum:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end
		end
		wait(math.random(2, 4))
	end
end

-- Start
coroutine.wrap(startCountdown)()
coroutine.wrap(autoMoveLoop)()
